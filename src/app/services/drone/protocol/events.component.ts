

export enum DroneEvents {
    ORIENTATION,
    SPEED,
    BATTERY,
    GUIDEDPOINT,
    NAVIGATION,
    ATTITUDE,
    RADIO,
    RC_IN,
    RC_OUT,
    ARMING,
    AUTOPILOT_WARNING,
    MODE,
    STATE,
    MISSION_UPDATE,
    MISSION_RECEIVED,
    TYPE,
    HOME,
    GPS,
    GPS_FIX,
    GPS_COUNT,
    PARAMETER,
    CALIBRATION_IMU,
    CALIBRATION_TIMEOUT,
    HEARTBEAT_TIMEOUT,
    HEARTBEAT_FIRST,
    HEARTBEAT_RESTORED,
    DISCONNECTED,
    CONNECTED,
    MISSION_SENT,
    ARMING_STARTED,
    INVALID_POLYGON,
    MISSION_WP_UPDATE,
    FOLLOW_START,
    FOLLOW_STOP,
    FOLLOW_UPDATE,
    FOLLOW_CHANGE_TYPE,
    WARNING_400FT_EXCEEDED,
    WARNING_SIGNAL_WEAK,
    FIRMWARE,
    WARNING_NO_GPS,
    MAGNETOMETER,
    FOOTPRINT,
    PERIMETER_RECEIVED,
    LEFT_PERIMETER,
    ENFORCING_PERIMETER,
    TEXT_MESSEGE,
    BEACON_BEEP,
    BEACON_LOCK_START,
    BEACON_LOCK_FINISH,
    GCS_LOCATION,
    PROTOCOL_LEARNING,
    PROTOCOL_IDENTIFIED,
    AUTOPILOT_VERSION,

    EXT_CALIB_MAGNETOMETER_START,
    EXT_CALIB_MAGNETOMETER_PROGRESS,
    EXT_CALIB_MAGNETOMETER_FINISH,

    EXT_CALIB_RC_START,
    EXT_CALIB_RC_PROGRESS,
    EXT_CALIB_RC_FINISH,


    PARAMS_START=1000,
    PARAM_RECEIVE=1001,
    PARAMS_END=1002,
}

export class DroneEvent {

    constructor(public id: DroneEvents, public data: any, public timestamp: number) {

    }
}

export class DroneEventMap {
    static map: Map<String, DroneEvents> = new Map([
        ["ORIENTATION" ,DroneEvents.ORIENTATION],
        ["SPEED" ,DroneEvents.SPEED],
        ["BATTERY" ,DroneEvents.BATTERY],
        ["GUIDEDPOINT" ,DroneEvents.GUIDEDPOINT],
        ["NAVIGATION" ,DroneEvents.NAVIGATION],
        ["ATTITUDE" ,DroneEvents.ATTITUDE],
        ["RADIO" ,DroneEvents.RADIO],
        ["RC_IN" ,DroneEvents.RC_IN],
        ["RC_OUT" ,DroneEvents.RC_OUT],
        ["ARMING" ,DroneEvents.ARMING],
        ["AUTOPILOT_WARNING" ,DroneEvents.AUTOPILOT_WARNING],
        ["MODE" ,DroneEvents.MODE],
        ["STATE" ,DroneEvents.STATE],
        ["MISSION_UPDATE" ,DroneEvents.MISSION_UPDATE],
        ["MISSION_RECEIVED" ,DroneEvents.MISSION_RECEIVED],
        ["TYPE" ,DroneEvents.TYPE],
        ["HOME" ,DroneEvents.HOME],
        ["GPS" ,DroneEvents.GPS],
        ["GPS_FIX" ,DroneEvents.GPS_FIX],
        ["GPS_COUNT" ,DroneEvents.GPS_COUNT],
        ["PARAMETER" ,DroneEvents.PARAMETER],
        ["CALIBRATION_IMU" ,DroneEvents.CALIBRATION_IMU],
        ["CALIBRATION_TIMEOUT" ,DroneEvents.CALIBRATION_TIMEOUT],
        ["HEARTBEAT_TIMEOUT" ,DroneEvents.HEARTBEAT_TIMEOUT],
        ["HEARTBEAT_FIRST" ,DroneEvents.HEARTBEAT_FIRST],
        ["HEARTBEAT_RESTORED" ,DroneEvents.HEARTBEAT_RESTORED],
        ["DISCONNECTED" ,DroneEvents.DISCONNECTED],
        ["CONNECTED" ,DroneEvents.CONNECTED],
        ["MISSION_SENT" ,DroneEvents.MISSION_SENT],
        ["ARMING_STARTED" ,DroneEvents.ARMING_STARTED],
        ["INVALID_POLYGON" ,DroneEvents.INVALID_POLYGON],
        ["MISSION_WP_UPDATE" ,DroneEvents.MISSION_WP_UPDATE],
        ["FOLLOW_START" ,DroneEvents.FOLLOW_START],
        ["FOLLOW_STOP" ,DroneEvents.FOLLOW_STOP],
        ["FOLLOW_UPDATE" ,DroneEvents.FOLLOW_UPDATE],
        ["FOLLOW_CHANGE_TYPE" ,DroneEvents.FOLLOW_CHANGE_TYPE],
        ["WARNING_400FT_EXCEEDED" ,DroneEvents.WARNING_400FT_EXCEEDED],
        ["WARNING_SIGNAL_WEAK" ,DroneEvents.WARNING_SIGNAL_WEAK],
        ["FIRMWARE" ,DroneEvents.FIRMWARE],
        ["WARNING_NO_GPS" ,DroneEvents.WARNING_NO_GPS],
        ["MAGNETOMETER" ,DroneEvents.MAGNETOMETER],
        ["FOOTPRINT" ,DroneEvents.FOOTPRINT],
        ["PERIMETER_RECEIVED" ,DroneEvents.PERIMETER_RECEIVED],
        ["LEFT_PERIMETER" ,DroneEvents.LEFT_PERIMETER],
        ["ENFORCING_PERIMETER" ,DroneEvents.ENFORCING_PERIMETER],
        ["TEXT_MESSEGE" ,DroneEvents.TEXT_MESSEGE],
        ["BEACON_BEEP" ,DroneEvents.BEACON_BEEP],
        ["BEACON_LOCK_START" ,DroneEvents.BEACON_LOCK_START],
        ["BEACON_LOCK_FINISH" ,DroneEvents.BEACON_LOCK_FINISH],
        ["GCS_LOCATION" ,DroneEvents.GCS_LOCATION],
        ["PROTOCOL_LEARNING" ,DroneEvents.PROTOCOL_LEARNING],
        ["PROTOCOL_IDENTIFIED" ,DroneEvents.PROTOCOL_IDENTIFIED],
        ["AUTOPILOT_VERSION" ,DroneEvents.AUTOPILOT_VERSION],
        
        ["EXT_CALIB_MAGNETOMETER_START" ,DroneEvents.EXT_CALIB_MAGNETOMETER_START],
        ["EXT_CALIB_MAGNETOMETER_PROGRESS" ,DroneEvents.EXT_CALIB_MAGNETOMETER_PROGRESS],
        ["EXT_CALIB_MAGNETOMETER_FINISH" ,DroneEvents.EXT_CALIB_MAGNETOMETER_FINISH],
        ["EXT_CALIB_RC_START" ,DroneEvents.EXT_CALIB_RC_START],
        ["EXT_CALIB_RC_PROGRESS" ,DroneEvents.EXT_CALIB_RC_PROGRESS],
        ["EXT_CALIB_RC_FINISH" ,DroneEvents.EXT_CALIB_RC_FINISH],

        ["PARAMS_START" ,DroneEvents.PARAMS_START],
        ["PARAM_RECEIVE" ,DroneEvents.PARAM_RECEIVE],
        ["PARAMS_END" ,DroneEvents.PARAMS_END],
    ])
}